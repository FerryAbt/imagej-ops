#**

	Template for generation RealType implementations of arithmetic ops interfaces

	@author Jonathan Hale

*#
#** set default values *#
#foreach ($member in $members)#if (!$member.type)$!member.put("type","double")#end#end
#if (!$authors)#set($authors = ["Barry DeZonia", "Jonathan Hale"])#end
/*
 * #%L
 * ImageJ OPS: a framework for reusable algorithms.
 * %%
 * Copyright (C) 2014 Board of Regents of the University of
 * Wisconsin-Madison and University of Konstanz.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */
package net.imagej.ops.generated.arithmetic.real;

import net.imagej.ops.AbstractFunction;
import net.imagej.ops.Op;
import net.imagej.ops.generated.arithmetic.${interface};

import net.imglib2.type.numeric.RealType;
#foreach ($imp in $imports)
import $imp;
#end

import org.scijava.plugin.Plugin;


/**
#foreach ($line in $javadoc.split('\n'))
 * $line
#end
#foreach ($author in $authors)
 * @author $author
#end
 */
@Plugin(type = Op.class, name = ${interface}.NAME)
public class Real$interface<I extends RealType<I>, O extends RealType<O>> extends AbstractFunction<I, O>
	implements $interface
{
#foreach ($member in $members)
#if (!$member.isEmpty())
	private #if ($member.modifiers)${member.modifiers} #end${member.type} ${member.name}#if ($member.init)= ${member.init}#end;
#end
#end

#set($first = 0)
	public Real$interface(#foreach ($member in $members)
#if (!${member.contruct}&&!${member.init})#if ($first != 0),#end final ${member.type} ${member.name}#set($first = 1)#end
#end){
#foreach ($member in $members)#if (${member.construct})
		this.${member.name} = ${member.construct};
#elseif(!${member.init})
		this.${member.name} = ${member.name};
#end#end
		$!constructor
	}

	@Override
	public O compute(final I input, O output){
		#if ($compute_body)
		$compute_body
		#end
		#if ($compute_expr)
		output.setReal(${compute_expr});
		#end
		#if (!$omit_return)
		return output;
		#end
	}
}
